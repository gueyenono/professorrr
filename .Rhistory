groups_col <- rlang::enquo(groups_col)
groups_col
.data %>%
group_by(!!!groups_col) %>%
tally()
.data %>%
group_by(!!groups_col) %>%
tally()
groups_col <- rlang::quo_name(groups_col)
.data %>%
group_by(!!groups_col) %>%
tally()
groups_col
groups_col <- rlang::parse_quo(groups_col)
groups_col <- rlang::parse_expr(groups_col)
groups_col
.data %>%
group_by(!!groups_col) %>%
tally()
.data %>%
group_by(!!groups_col) %>%
tally() %>%
filter(!is.na(!!groups_col), n < s)
.data %>%
group_by(!!groups_col) %>%
tally()
?tally
.data %>%
group_by(!!groups_col) %>%
tally(name = "count")
.data %>%
group_by(!!groups_col) %>%
tally(name = "count") %>%
filter(!is.na(!!groups_col), count < s)
.data %>%
group_by(!!groups_col) %>%
tally(name = "count") %>%
filter(!is.na(!!groups_col), count < s) %>%
mutate(needed = s - n)
.data %>%
group_by(!!groups_col) %>%
tally(name = "count") %>%
filter(!is.na(!!groups_col), count < s) %>%
mutate(needed = s - count)
.data %>%
group_by(!!groups_col) %>%
tally(name = "count") %>%
filter(!is.na(!!groups_col), count < s) %>%
mutate(needed = s - count)
.data %>%
group_by(!!groups_col) %>%
tally(name = "count") %>%
filter(!is.na(!!groups_col), count < s) %>%
mutate(needed = s - count)
.data %>%
group_by(!!groups_col) %>%
tally(name = "count") %>%
filter(!is.na(!!groups_col), count < s) %>%
mutate(needed = s - count) %>%
setNames(c("groups_col", "current_size", "needed"))
identify_incomplete <- function(.data, groups_col, s){
groups_col <- rlang::parse_expr(groups_col)
.data %>%
group_by(!!groups_col) %>%
tally(name = "count") %>%
filter(!is.na(!!groups_col), count < s) %>%
mutate(needed = s - count) %>%
setNames(c("groups_col", "current_size", "needed"))
}
identify_incomplete <- function(.data, groups_col, s){
groups_col <- rlang::parse_expr(groups_col)
.data %>%
group_by(!!groups_col) %>%
tally(name = "count") %>%
filter(!is.na(!!groups_col), count < s) %>%
mutate(needed = s - count) %>%
setNames(c("groups_col", "current_size", "needed"))
}
groups_col
.data
!!groups_col
s
incomplete_groups <- identify_incomplete(.data = .data, groups_col = !!groups_col, s = s)
groups_col <- rlang::parse_expr(groups_col)
groups_col <- "group"
groups_col <- rlang::parse_expr(groups_col)
incomplete_groups <- identify_incomplete(.data = .data, groups_col = !!groups_col, s = s)
incomplete_groups <- identify_incomplete(.data = .data, groups_col = groups_col, s = s)
.data
groups_col <- rlang::parse_expr(groups_col)
groups_col
incomplete_groups <- identify_incomplete(.data = .data, groups_col = quo(groups_col), s = s)
class <- read.xlsx("data/ECON-312-001-Spring19 Grades.xlsx")
.data <- class
group_size <- s <- 3
alt_group_size <- "larger" # alt_group_size = c("smaller", "larger")
groups_col <- "group"
groups_col <- rlang::parse_expr(groups_col)
groups_col
.data %>%
group_by(!!groups_col) %>%
tally(name = "count") %>%
filter(!is.na(!!groups_col), count < s) %>%
mutate(needed = s - count) %>%
setNames(c("groups_col", "current_size", "needed"))
.data <- class
group_size <- s <- 3
alt_group_size <- "larger" # alt_group_size = c("smaller", "larger")
groups_col <- "group"
.data <- class
group_size <- s <- 3
alt_group_size <- "larger" # alt_group_size = c("smaller", "larger")
groups_col <- "group"
incomplete_groups <- identify_incomplete(.data = .data, groups_col = quo(groups_col), s = s)
identify_incomplete <- function(.data, groups_col, s){
groups_col <- rlang::parse_expr(groups_col)
.data %>%
group_by(!!groups_col) %>%
tally(name = "count") %>%
filter(!is.na(!!groups_col), count < s) %>%
mutate(needed = s - count) %>%
setNames(c("groups_col", "current_size", "needed"))
}
incomplete_groups <- identify_incomplete(.data = .data, groups_col = quo(groups_col), s = s)
incomplete_groups <- identify_incomplete(.data = .data, groups_col = groups_col, s = s)
incomplete_groups
incomplete_groups
which(is.na(.data[[groups_col]]))
potential_new_members <- which(is.na(.data[[groups_col]]))
new_members <- tibble(
id = sample(potential_new_members, size = sum(incomplete_groups$needed), replace = FALSE),
groups_col = rep(incomplete_groups$groups_col, incomplete_groups$needed)
)
new_members
.data[[groups_col]]
.data[[groups_col]][new_members$id]
new_members[["groups_col"]]
.data[[groups_col]][new_members$id] <- new_members[["groups_col"]]
.data
identify_incomplete(.data = .data, groups_col = "group", s = 3)
identify_incomplete(.data = .data, groups_col = "group", s = 3) %>% nrow()
complete_groups <- function(.data, groups_col, s){ # groups_col needs to be a character here
incomplete_groups <- identify_incomplete(.data = .data, groups_col = groups_col, s = s)
if(nrow(incomplete_groups) == 0){
return(.data)
} else {
potential_new_members <- which(is.na(.data[[groups_col]]))
new_members <- tibble(
id = sample(potential_new_members, size = sum(incomplete_groups$needed), replace = FALSE),
groups_col = rep(incomplete_groups$groups_col, incomplete_groups$needed)
)
.data[[groups_col]][new_members$id] <- new_members[["groups_col"]]
return(.data)
}
}
complete_groups <- function(.data, groups_col, s){ # groups_col needs to be a character here
incomplete_groups <- identify_incomplete(.data = .data, groups_col = groups_col, s = s)
if(nrow(incomplete_groups) == 0){
return(.data)
} else {
potential_new_members <- which(is.na(.data[[groups_col]]))
new_members <- tibble(
id = sample(potential_new_members, size = sum(incomplete_groups$needed), replace = FALSE),
groups_col = rep(incomplete_groups$groups_col, incomplete_groups$needed)
)
.data[[groups_col]][new_members$id] <- new_members[["groups_col"]]
return(.data)
}
}
library(openxlsx)
library(dplyr)
library(rlang)
set.seed(123)
class <- read.xlsx("data/ECON-312-001-Spring19 Grades.xlsx")
.data <- class
group_size <- s <- 3
alt_group_size <- "larger" # alt_group_size = c("smaller", "larger")
groups_col <- "group"
add_to_random <- function(x, n, addition){
changed_i <- sample(length(x), size = n, replace = FALSE)
x[changed_i] <- x[changed_i] + addition
x
}
substract_from_random <- function(x, n, substraction){
changed_i <- sample(length(x), size = n, replace = FALSE)
x[changed_i] <- x[changed_i] - substraction
x
}
identify_incomplete <- function(.data, groups_col, s){
groups_col <- rlang::parse_expr(groups_col)
.data %>%
group_by(!!groups_col) %>%
tally(name = "count") %>%
filter(!is.na(!!groups_col), count < s) %>%
mutate(needed = s - count) %>%
setNames(c("groups_col", "current_size", "needed"))
}
groups_col
.data
table(.data$group)
?table
table(.data$group, useNA = "yes")
table(.data$group, useNA = "always")
x <- complete_groups(.data = .data, groups_col = "group", s = 3)
complete_groups <- function(.data, groups_col, s){ # groups_col needs to be a character here
incomplete_groups <- identify_incomplete(.data = .data, groups_col = groups_col, s = s)
if(nrow(incomplete_groups) == 0){
return(.data)
} else {
potential_new_members <- which(is.na(.data[[groups_col]]))
new_members <- tibble(
id = sample(potential_new_members, size = sum(incomplete_groups$needed), replace = FALSE),
groups_col = rep(incomplete_groups$groups_col, incomplete_groups$needed)
)
.data[[groups_col]][new_members$id] <- new_members[["groups_col"]]
return(.data)
}
}
x <- complete_groups(.data = .data, groups_col = "group", s = 3)
x
table(x$group, useNA = "always")
table(.data$group, useNA = "always")
x <- complete_groups(.data = .data, groups_col = "group", s = 3)
table(x$group, useNA = "always")
identify_incomplete(.data = x, groups_col = "group", s = 3)
y <- complete_groups(.data = x, groups_col = "group", s = 3)
identical(.data, y)
.data
table(y$group)
table(y$group, useNA = "always")
table(x$group, useNA = "always")
table(.data$group, useNA = "always")
library(openxlsx)
library(dplyr)
library(rlang)
set.seed(123)
class <- read.xlsx("data/ECON-312-001-Spring19 Grades.xlsx")
.data <- class
group_size <- s <- 3
alt_group_size <- "larger" # alt_group_size = c("smaller", "larger")
groups_col <- "group"
add_to_random <- function(x, n, addition){
changed_i <- sample(length(x), size = n, replace = FALSE)
x[changed_i] <- x[changed_i] + addition
x
}
substract_from_random <- function(x, n, substraction){
changed_i <- sample(length(x), size = n, replace = FALSE)
x[changed_i] <- x[changed_i] - substraction
x
}
identify_incomplete <- function(.data, groups_col, s){
groups_col <- rlang::parse_expr(groups_col)
.data %>%
group_by(!!groups_col) %>%
tally(name = "count") %>%
filter(!is.na(!!groups_col), count < s) %>%
mutate(needed = s - count) %>%
setNames(c("groups_col", "current_size", "needed"))
}
no_group_ids <- which(is.na(.data[[groups_col]])) # row id of students with no group
n <- length(no_group_ids) # number of people who need a group
g <- n %/% s # number of appropriately sized groups
r <- n %% s # number of people "left behind" when all groups are initially formed
no_group_ids
n
g
r
group_size
s
top_off_groups <- function(.data, groups_col, s){ # groups_col needs to be a character here
incomplete_groups <- identify_incomplete(.data = .data, groups_col = groups_col, s = s)
if(nrow(incomplete_groups) == 0){
return(.data)
} else {
potential_new_members <- which(is.na(.data[[groups_col]]))
new_members <- tibble(
id = sample(potential_new_members, size = sum(incomplete_groups$needed), replace = FALSE),
groups_col = rep(incomplete_groups$groups_col, incomplete_groups$needed)
)
.data[[groups_col]][new_members$id] <- new_members[["groups_col"]]
return(.data)
}
}
table(.data$group)
# Identify incomplete groups and "top them off"
top_off_groups(.data = .data, groups_col = "group", s = 3)
# Identify incomplete groups and "top them off" if there are any
.data_2 <- top_off_groups(.data = .data, groups_col = "group", s = 3)
no_group_ids
max(rep(1:5), each = 2)
g
seq_len(g)
rep(seq_len(g), each = s)
seq_len(g)
rep(seq_len(g), each = s + q)
q
# Identify incomplete groups and "top them off" if there are any
.data_2 <- top_off_groups(.data = .data, groups_col = "group", s = 3)
no_group_ids <- which(is.na(.data_2[[groups_col]])) # row id of students with no group
n <- length(no_group_ids) # number of people who need a group
g <- n %/% s # number of appropriately sized groups
r <- n %% s # number of people "left behind" when all groups are initially formed
q <- r %/% g
v <- r %% g
group_index_start <- max(.data_2[[groups_col]]) + 1
q
rep(seq_len(g), each = s + q)
rep(1:5, each = 1:5)
?rep
rep(1:4, each = 2, times = 3)
rep(1:5, time = 1:5)
rep(1:5, times = 1:5)
seq_len(g)
rep(seq_len(g),
c(rep(s + 1, r), rep(s, g - r))
)
x <- rep(seq_len(g), each = s + q)
y <- rep(seq_len(g),
c(rep(s + 1, r), rep(s, g - r)))
length(x)
length(y)
seq_len(g)
rep(seq_len(g) + group_index_start, each = s)
group_index_start
group_index_start <- max(.data_2[[groups_col]]) + 1
group_index_start
.data_2[[groups_col]]
group_index_start <- max(.data_2[[groups_col]], na.rm = TRUE) + 1
group_index_start
rep(seq_len(g) + group_index_start, each = s)
c(rep(seq_len(g - 1) + group_index_start, each = s), r)
c(rep(seq_len(g - 1) + group_index_start, each = s), r)
rep(seq_len(g - 1) + group_index_start,
c(rep(s, g), 1))
rep(seq_len(g - 1) + group_index_start,
c(rep(s, g), 1)
)
rep(s, g)
c(rep(s, g), 1)
rep(seq_len(g - 1) + group_index_start,
c(rep(s, g), rep(r, 1)))
c(rep(s, g), rep(r, 1))
library(openxlsx)
library(dplyr)
library(rlang)
set.seed(123)
class <- read.xlsx("data/ECON-312-001-Spring19 Grades.xlsx")
.data <- class
group_size <- s <- 3
alt_group_size <- "larger" # alt_group_size = c("smaller", "larger")
groups_col <- "group"
add_to_random <- function(x, n, addition){
changed_i <- sample(length(x), size = n, replace = FALSE)
x[changed_i] <- x[changed_i] + addition
x
}
substract_from_random <- function(x, n, substraction){
changed_i <- sample(length(x), size = n, replace = FALSE)
x[changed_i] <- x[changed_i] - substraction
x
}
identify_incomplete <- function(.data, groups_col, s){
groups_col <- rlang::parse_expr(groups_col)
.data %>%
group_by(!!groups_col) %>%
tally(name = "count") %>%
filter(!is.na(!!groups_col), count < s) %>%
mutate(needed = s - count) %>%
setNames(c("groups_col", "current_size", "needed"))
}
top_off_groups <- function(.data, groups_col, s){ # groups_col needs to be a character here
incomplete_groups <- identify_incomplete(.data = .data, groups_col = groups_col, s = s)
if(nrow(incomplete_groups) == 0){
return(.data)
} else {
potential_new_members <- which(is.na(.data[[groups_col]]))
new_members <- tibble(
id = sample(potential_new_members, size = sum(incomplete_groups$needed), replace = FALSE),
groups_col = rep(incomplete_groups$groups_col, incomplete_groups$needed)
)
.data[[groups_col]][new_members$id] <- new_members[["groups_col"]]
return(.data)
}
}
s <- group_size # Just to keep it in line with the paper's notation
s
.data
table(.data$group)
# Identify incomplete groups and "top them off" if there are any
.data_2 <- top_off_groups(.data = .data, groups_col = "group", s = 3)
.data_2
table(.data_2$group)
no_group_ids <- which(is.na(.data_2[[groups_col]])) # row id of students with no group
n <- length(no_group_ids) # number of people who need a group
g <- n %/% s # number of appropriately sized groups
r <- n %% s # number of people "left behind" when all groups are initially formed
q <- r %/% g
v <- r %% g
group_index_start <- max(.data_2[[groups_col]], na.rm = TRUE) + 1
group_index_start
r
.data_2
n
42/3
rep(seq_len(g) + group_index_start, each = s)
rep(seq_len(g) + group_index_start, each = s)
c(n %/% 2, (n %/% 2) + 1)
rep(seq_len(2), c(n %/% 2, (n %/% 2) + 1))
rep(seq_len(g) + group_index_start, # method 1 / case 2
c(rep(s + 1, r), rep(s, g - r)))
1511/60
install.packages("tidyr")
library(tidyr)
crossing(1:10, 1:5)
sim <- crossing(
n = seq_len(10e6),
g = seq_len(1e3)
)
sim <- crossing(
n = seq_len(10e3),
g = seq_len(1e3)
)
sim
sim <- crossing(
n = 3:10e3,
g = 2:1e3
)
sim
sim <- crossing(
n = 3:10e3,
s = 2:1e3
) %>%
mutate(
g = n %/% s,
r = n %% s,
q = r %/% g,
v = r %% g
)
library(dplyr)
sim <- crossing(
n = 3:10e3,
s = 2:1e3
)
sim %>%
mutate(
g = n %/% s,
r = n %% s,
q = r %/% g,
v = r %% g
)
sim <- crossing(
n = 3:10e3,
s = 2:1e3
) %>%
filter(n > s)
sim
sim %>%
mutate(
g = n %/% s,
r = n %% s,
q = r %/% g,
v = r %% g
)
sim %>%
mutate(
g = n %/% s,
r = n %% s,
q = r %/% g,
v = r %% g
)
sim <- crossing(
n = 3:10e3,
s = 2:1e3
) %>%
filter(n > s) %>%
mutate(
g = n %/% s,
r = n %% s,
q = r %/% g,
v = r %% g
)
sim
sim_method_1 <- crossing(
n = 3:10e3,
s = 2:1e3
) %>%
filter(n > s) %>%
mutate(
g = n %/% s,
r = n %% s,
q = r %/% g,
v = r %% g
)
sim_method_1 %>%
mutate(
case = case_when(
r == 0 ~ "perfect",
TRUE ~ "other"
)
)
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::document()
library(professorrr)
install.packages("testthat")
install.packages("rlang")
install.packages("roxygen2")
install.packages("dplyr", "tibble")
install.packages("tibble")
install.packages("dplyr")
install.packages("purrr")
